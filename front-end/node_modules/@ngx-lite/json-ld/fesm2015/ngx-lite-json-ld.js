import { Component, HostBinding, Input, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxJsonLdComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.jsonLD = this.getSafeHTML(changes["json"].currentValue);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getSafeHTML(value) {
        /** @type {?} */
        const json = value
            ? JSON.stringify(value, null, 2).replace(/<\/script>/g, '<\\/script>')
            : '';
        /** @type {?} */
        const html = `<script type="application/ld+json">${json}</script>`;
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
}
NgxJsonLdComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-json-ld',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxJsonLdComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
NgxJsonLdComponent.propDecorators = {
    json: [{ type: Input }],
    jsonLD: [{ type: HostBinding, args: ['innerHTML',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxJsonLdModule {
}
NgxJsonLdModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NgxJsonLdComponent],
                exports: [NgxJsonLdComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxJsonLdComponent, NgxJsonLdModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxpdGUtanNvbi1sZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1saXRlL2pzb24tbGQvbmd4LWpzb24tbGQuY29tcG9uZW50LnRzIiwibmc6Ly9Abmd4LWxpdGUvanNvbi1sZC9uZ3gtanNvbi1sZC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1qc29uLWxkJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hKc29uTGRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBqc29uO1xuICBASG9zdEJpbmRpbmcoJ2lubmVySFRNTCcpIGpzb25MRDogU2FmZUh0bWw7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIHRoaXMuanNvbkxEID0gdGhpcy5nZXRTYWZlSFRNTChjaGFuZ2VzLmpzb24uY3VycmVudFZhbHVlKTtcbiAgfVxuXG4gIGdldFNhZmVIVE1MKHZhbHVlOiB7fSkge1xuICAgIGNvbnN0IGpzb24gPSB2YWx1ZVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMikucmVwbGFjZSgvPFxcL3NjcmlwdD4vZywgJzxcXFxcL3NjcmlwdD4nKVxuICAgICAgOiAnJztcbiAgICBjb25zdCBodG1sID0gYDxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2xkK2pzb25cIj4ke2pzb259PC9zY3JpcHQ+YDtcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoaHRtbCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmd4SnNvbkxkQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtanNvbi1sZC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4SnNvbkxkQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW05neEpzb25MZENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4SnNvbkxkTW9kdWxlIHt9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQWVhLGtCQUFrQjs7OztJQUc3QixZQUFvQixTQUF1QjtRQUF2QixjQUFTLEdBQVQsU0FBUyxDQUFjO0tBQUk7Ozs7O0lBRS9DLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxTQUFNLFlBQVksQ0FBQyxDQUFDO0tBQzNEOzs7OztJQUVELFdBQVcsQ0FBQyxLQUFTOztRQUNuQixNQUFNLElBQUksR0FBRyxLQUFLO2NBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO2NBQ3BFLEVBQUUsQ0FBQzs7UUFDUCxNQUFNLElBQUksR0FBRyxzQ0FBc0MsSUFBSSxXQUFXLENBQUM7UUFDbkUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JEOzs7WUFwQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUUsRUFBRTtnQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQU5RLFlBQVk7OzttQkFRbEIsS0FBSztxQkFDTCxXQUFXLFNBQUMsV0FBVzs7Ozs7OztBQ2pCMUIsTUFTYSxlQUFlOzs7WUFMM0IsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDdkIsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQzlCOzs7Ozs7Ozs7Ozs7Ozs7In0=