import { is } from '@tjoskar/assert';
import { Rect } from '../rect';
describe('Rect', function () {
    it('Should create a correctly sized Rect from a ClientRect object', function () {
        var element = {
            getBoundingClientRect: function () {
                return ({
                    left: 100,
                    top: 200,
                    right: 300,
                    bottom: 400
                });
            }
        };
        var rect = Rect.fromElement(element);
        is(rect.left, element.getBoundingClientRect().left);
        is(rect.top, element.getBoundingClientRect().top);
        is(rect.right, element.getBoundingClientRect().right);
        is(rect.bottom, element.getBoundingClientRect().bottom);
    });
    it('Should create a correctly sized Rect from a Window object', function () {
        var _window = {
            innerWidth: 100,
            innerHeight: 200
        };
        var rect = Rect.fromWindow(_window);
        is(rect.left, 0);
        is(rect.top, 0);
        is(rect.right, _window.innerWidth);
        is(rect.bottom, _window.innerHeight);
    });
    describe('inflate', function () {
        it('Should inflate correctly with a positive value', function () {
            var inflateBy = 70;
            var left = 0;
            var top = 0;
            var right = 100;
            var bottom = 100;
            var rect = new Rect(left, top, right, bottom);
            rect.inflate(inflateBy);
            is(rect.left, left - inflateBy);
            is(rect.top, top - inflateBy);
            is(rect.right, right + inflateBy);
            is(rect.bottom, bottom + inflateBy);
        });
        it('Should inflate correctly with a negative value', function () {
            var inflateBy = -70;
            var left = 0;
            var top = 0;
            var right = 100;
            var bottom = 100;
            var rect = new Rect(left, top, right, bottom);
            rect.inflate(inflateBy);
            is(rect.left, left - inflateBy);
            is(rect.top, top - inflateBy);
            is(rect.right, right + inflateBy);
            is(rect.bottom, bottom + inflateBy);
        });
        it('Should should not change if 0 is passed', function () {
            var inflateBy = 0;
            var left = 0;
            var top = 0;
            var right = 100;
            var bottom = 100;
            var rect = new Rect(left, top, right, bottom);
            rect.inflate(inflateBy);
            is(rect.left, left);
            is(rect.top, top);
            is(rect.right, right);
            is(rect.bottom, bottom);
        });
    });
    describe('intersectsWith', function () {
        it('Should not be true if first rectangle is on left side without intersecting', function () {
            var rectA = new Rect(21, 0, 41, 20);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, false);
        });
        it('Should not be true if first rectangle is on top side without intersecting', function () {
            var rectA = new Rect(0, 21, 20, 41);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, false);
        });
        it('Should not be true if second rectangle is on left side without intersecting', function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(21, 0, 41, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, false);
        });
        it('Should not be true if second rectangle is on top side without intersecting', function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(0, 21, 20, 41);
            var result = rectA.intersectsWith(rectB);
            is(result, false);
        });
        it("Should be true if first rectangle's top left corner is inside second rectangle", function () {
            var rectA = new Rect(10, 10, 30, 30);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if first rectangle's top right corner is inside second rectangle", function () {
            var rectA = new Rect(-10, 10, 10, 30);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if first rectangle's bottom left corner is inside second rectangle", function () {
            var rectA = new Rect(10, -10, 30, 10);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if first rectangle's bottom right corner is inside second rectangle", function () {
            var rectA = new Rect(-10, -10, 10, 10);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if second rectangle's top left corner is inside first rectangle", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(10, 10, 30, 30);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if second rectangle's top right corner is inside first rectangle", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(-10, 10, 10, 30);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if second rectangle's bottom left corner is inside first rectangle", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(10, -10, 30, 10);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if second rectangle's bottom right corner is inside first rectangle", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(-10, -10, 10, 10);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Should be true if first rectangle's side without corners is inside second rectangle", function () {
            var rectA = new Rect(-10, -10, 10, 30);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it("Shoult be true if second rectangle's side without corners is inside first rectangle", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(-10, -10, 30, 10);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it('Should be true if first rectangle completely contains second rectangle', function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(5, 5, 15, 15);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
        it('Should be true if second rectangle completely contains first rectangle', function () {
            var rectA = new Rect(5, 5, 15, 15);
            var rectB = new Rect(0, 0, 20, 20);
            var result = rectA.intersectsWith(rectB);
            is(result, true);
        });
    });
    describe('getIntersectionWith', function () {
        it("Should return a correctly sized Rect if two Rect's intersect horizontally", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(0, 10, 20, 30);
            var result = rectA.getIntersectionWith(rectB);
            is(result.top, 10);
            is(result.right, 20);
            is(result.bottom, 20);
            is(result.left, 0);
        });
        it("Should return a correctly sized Rect if two Rect's intersect vertically", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(10, 0, 30, 20);
            var result = rectA.getIntersectionWith(rectB);
            is(result.top, 0);
            is(result.right, 20);
            is(result.bottom, 20);
            is(result.left, 10);
        });
        it("Should return a correctly sized Rect if two Rect's intersect corners", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(10, 10, 30, 30);
            var result = rectA.getIntersectionWith(rectB);
            is(result.top, 10);
            is(result.right, 20);
            is(result.bottom, 20);
            is(result.left, 10);
        });
        it("Should return an empty Rect if two Rect's don't intersect", function () {
            var rectA = new Rect(0, 0, 20, 20);
            var rectB = new Rect(30, 30, 50, 50);
            var result = rectA.getIntersectionWith(rectB);
            is(result.top, 0);
            is(result.right, 0);
            is(result.bottom, 0);
            is(result.left, 0);
        });
    });
});
//# sourceMappingURL=rect.test.js.map