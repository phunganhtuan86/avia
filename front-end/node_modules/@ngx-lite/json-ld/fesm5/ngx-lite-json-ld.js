import { Component, HostBinding, Input, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxJsonLdComponent = /** @class */ (function () {
    function NgxJsonLdComponent(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxJsonLdComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.jsonLD = this.getSafeHTML(changes["json"].currentValue);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxJsonLdComponent.prototype.getSafeHTML = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var json = value
            ? JSON.stringify(value, null, 2).replace(/<\/script>/g, '<\\/script>')
            : '';
        /** @type {?} */
        var html = "<script type=\"application/ld+json\">" + json + "</script>";
        return this.sanitizer.bypassSecurityTrustHtml(html);
    };
    NgxJsonLdComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-json-ld',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxJsonLdComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    NgxJsonLdComponent.propDecorators = {
        json: [{ type: Input }],
        jsonLD: [{ type: HostBinding, args: ['innerHTML',] }]
    };
    return NgxJsonLdComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxJsonLdModule = /** @class */ (function () {
    function NgxJsonLdModule() {
    }
    NgxJsonLdModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NgxJsonLdComponent],
                    exports: [NgxJsonLdComponent]
                },] }
    ];
    return NgxJsonLdModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxJsonLdComponent, NgxJsonLdModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxpdGUtanNvbi1sZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1saXRlL2pzb24tbGQvbmd4LWpzb24tbGQuY29tcG9uZW50LnRzIiwibmc6Ly9Abmd4LWxpdGUvanNvbi1sZC9uZ3gtanNvbi1sZC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1qc29uLWxkJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hKc29uTGRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBqc29uO1xuICBASG9zdEJpbmRpbmcoJ2lubmVySFRNTCcpIGpzb25MRDogU2FmZUh0bWw7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIHRoaXMuanNvbkxEID0gdGhpcy5nZXRTYWZlSFRNTChjaGFuZ2VzLmpzb24uY3VycmVudFZhbHVlKTtcbiAgfVxuXG4gIGdldFNhZmVIVE1MKHZhbHVlOiB7fSkge1xuICAgIGNvbnN0IGpzb24gPSB2YWx1ZVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMikucmVwbGFjZSgvPFxcL3NjcmlwdD4vZywgJzxcXFxcL3NjcmlwdD4nKVxuICAgICAgOiAnJztcbiAgICBjb25zdCBodG1sID0gYDxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2xkK2pzb25cIj4ke2pzb259PC9zY3JpcHQ+YDtcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoaHRtbCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmd4SnNvbkxkQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtanNvbi1sZC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4SnNvbkxkQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW05neEpzb25MZENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4SnNvbkxkTW9kdWxlIHt9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtJQWtCRSw0QkFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztLQUFJOzs7OztJQUUvQyx3Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sU0FBTSxZQUFZLENBQUMsQ0FBQztLQUMzRDs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksS0FBUzs7UUFDbkIsSUFBTSxJQUFJLEdBQUcsS0FBSztjQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQztjQUNwRSxFQUFFLENBQUM7O1FBQ1AsSUFBTSxJQUFJLEdBQUcsMENBQXNDLElBQUksY0FBVyxDQUFDO1FBQ25FLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNyRDs7Z0JBcEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQU5RLFlBQVk7Ozt1QkFRbEIsS0FBSzt5QkFDTCxXQUFXLFNBQUMsV0FBVzs7NkJBakIxQjs7Ozs7OztBQ0FBOzs7O2dCQUlDLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztpQkFDOUI7OzBCQVJEOzs7Ozs7Ozs7Ozs7Ozs7In0=