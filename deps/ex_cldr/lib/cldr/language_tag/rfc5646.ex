# WARNING: This file was generated with by following command:
# mix abnf.generate ./priv/cldr/rfc5646.abnf ./lib/cldr/language_tag/rfc5646.ex Cldr.Rfc5646
defmodule Cldr.Rfc5646 do
  @moduledoc false

  import(Abnf.Operators)

  def parse(rule, input) when is_binary(input) do
    parse(rule, String.to_charlist(input))
  end

  def parse(rule, input) do
    parse(rule).(input)
  end

  defrule :"language-tag" do
    alternate([parse(:langtag), parse(:privateuse), parse(:grandfathered)])
  end

  defrule :langtag do
    concatenate([
      parse(:language),
      repeat(0, 1, concatenate([literal('-'), parse(:script)])),
      repeat(0, 1, concatenate([literal('-'), parse(:region)])),
      repeat(0, :infinity, concatenate([literal('-'), parse(:variant)])),
      repeat(0, :infinity, concatenate([literal('-'), parse(:extensions)])),
      repeat(0, 1, concatenate([literal('-'), parse(:privateuse)]))
    ])
  end

  defrule :language do
    alternate([
      repeat(2, 3, parse(:ALPHA)),
      repeat(4, 4, parse(:ALPHA)),
      repeat(5, 8, parse(:ALPHA))
    ])
  end

  defrule :extlang do
    concatenate([
      repeat(3, 3, parse(:ALPHA)),
      repeat(0, 2, concatenate([literal('-'), repeat(3, 3, parse(:ALPHA))]))
    ])
  end

  defrule :script do
    repeat(4, 4, parse(:ALPHA))
  end

  defrule :region do
    alternate([repeat(2, 2, parse(:ALPHA)), repeat(3, 3, parse(:DIGIT))])
  end

  defrule :variant do
    alternate([
      repeat(5, 8, parse(:alphanum)),
      concatenate([parse(:DIGIT), repeat(3, 3, parse(:alphanum))])
    ])
  end

  defrule :extensions do
    alternate([parse(:locale), parse(:transform), parse(:extension)])
  end

  defrule :extension do
    concatenate([
      parse(:singleton),
      repeat(1, :infinity, concatenate([literal('-'), repeat(2, 8, parse(:alphanum))]))
    ])
  end

  defrule :locale do
    concatenate([
      literal('u'),
      alternate([
        repeat(1, :infinity, concatenate([literal('-'), parse(:keyword)])),
        concatenate([
          repeat(1, :infinity, concatenate([literal('-'), parse(:attribute)])),
          repeat(0, :infinity, concatenate([literal('-'), parse(:keyword)]))
        ])
      ])
    ])
  end

  defrule :transform do
    concatenate([literal('t'), repeat(1, :infinity, concatenate([literal('-'), parse(:keyword)]))])
  end

  defrule :keyword do
    concatenate([parse(:key), repeat(0, 1, concatenate([literal('-'), parse(:type)]))])
  end

  defrule :key do
    repeat(2, 2, parse(:alphanum))
  end

  defrule :type do
    concatenate([
      repeat(3, 8, parse(:alphanum)),
      repeat(0, :infinity, concatenate([literal('-'), repeat(3, 8, parse(:alphanum))]))
    ])
  end

  defrule :attribute do
    repeat(3, 8, parse(:alphanum))
  end

  defrule :singleton do
    alternate([
      parse(:DIGIT),
      range(65, 83),
      range(86, 87),
      range(89, 90),
      range(97, 115),
      range(118, 119),
      range(121, 122)
    ])
  end

  defrule :privateuse do
    concatenate([
      literal('x'),
      repeat(1, :infinity, concatenate([literal('-'), repeat(1, 8, parse(:alphanum))]))
    ])
  end

  defrule :grandfathered do
    alternate([parse(:irregular), parse(:regular)])
  end

  defrule :irregular do
    alternate([
      literal('en-GB-oed'),
      literal('i-ami'),
      literal('i-bnn'),
      literal('i-default'),
      literal('i-enochian'),
      literal('i-hak'),
      literal('i-klingon'),
      literal('i-lux'),
      literal('i-mingo'),
      literal('i-navajo'),
      literal('i-pwn'),
      literal('i-tao'),
      literal('i-tay'),
      literal('i-tsu'),
      literal('sgn-BE-FR'),
      literal('sgn-BE-NL'),
      literal('sgn-CH-DE')
    ])
  end

  defrule :regular do
    alternate([
      literal('art-lojban'),
      literal('cel-gaulish'),
      literal('no-bok'),
      literal('no-nyn'),
      literal('zh-guoyu'),
      literal('zh-hakka'),
      literal('zh-min'),
      literal('zh-min-nan'),
      literal('zh-xiang')
    ])
  end

  defrule :alphanum do
    alternate([parse(:ALPHA), parse(:DIGIT)])
  end

  def parse(rule) do
    Abnf.Core.parse(rule)
  end
end
