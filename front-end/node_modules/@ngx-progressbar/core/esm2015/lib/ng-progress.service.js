/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { NgProgressRef } from './ng-progress-ref';
import { CONFIG } from './ng-progress.interface';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.interface";
const ɵ0 = (n) => {
    if (n >= 0 && n < 20)
        return 10;
    if (n >= 20 && n < 50)
        return 4;
    if (n >= 50 && n < 80)
        return 2;
    if (n >= 80 && n < 99)
        return 0.5;
    return 0;
};
/** @type {?} */
const defaultConfig = {
    min: 8,
    max: 100,
    speed: 200,
    debounceTime: 0,
    trickleSpeed: 300,
    fixed: true,
    meteor: true,
    thick: false,
    spinner: true,
    ease: 'linear',
    color: '#1B95E0',
    direction: 'ltr+',
    spinnerPosition: 'right',
    trickleFunc: ɵ0
};
export class NgProgress {
    /**
     * @param {?} config
     */
    constructor(config) {
        /**
         * Store progress bar instances
         */
        this._instances = new Map();
        this.config = Object.assign({}, defaultConfig, config);
    }
    /**
     * Get or Create progress bar by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    ref(id = 'root', config) {
        if (this._instances.has(id)) {
            /** @type {?} */
            const progressRef = this._instances.get(id);
            if (config) {
                progressRef.setConfig(Object.assign({}, this.config, config));
            }
            return progressRef;
        }
        else {
            /** @type {?} */
            const progressRef = new NgProgressRef(Object.assign({}, this.config, config), this.deleteInstance(id));
            return this._instances.set(id, progressRef).get(id);
        }
    }
    /**
     * Destroy all progress bar instances
     * @return {?}
     */
    destroyAll() {
        this._instances.forEach((ref) => ref.destroy());
    }
    /**
     * A destroyer function for each progress bar instance
     * @param {?} id
     * @return {?}
     */
    deleteInstance(id) {
        return () => {
            this._instances.delete(id);
        };
    }
}
NgProgress.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgProgress.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG,] }] }
];
/** @nocollapse */ NgProgress.ngInjectableDef = i0.defineInjectable({ factory: function NgProgress_Factory() { return new NgProgress(i0.inject(i1.CONFIG, 8)); }, token: NgProgress, providedIn: "root" });
if (false) {
    /**
     * Store progress bar instances
     * @type {?}
     */
    NgProgress.prototype._instances;
    /**
     * Global config
     * @type {?}
     */
    NgProgress.prototype.config;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtcHJvZ3Jlc3NiYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9uZy1wcm9ncmVzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBb0IsTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7OztXQWdCcEQsQ0FBQyxDQUFTLEVBQVUsRUFBRTtJQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUNsQyxPQUFPLENBQUMsQ0FBQztDQUNWOztBQXBCSCxNQUFNLGFBQWEsR0FBcUI7SUFDdEMsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsR0FBRztJQUNSLEtBQUssRUFBRSxHQUFHO0lBQ1YsWUFBWSxFQUFFLENBQUM7SUFDZixZQUFZLEVBQUUsR0FBRztJQUNqQixLQUFLLEVBQUUsSUFBSTtJQUNYLE1BQU0sRUFBRSxJQUFJO0lBQ1osS0FBSyxFQUFFLEtBQUs7SUFDWixPQUFPLEVBQUUsSUFBSTtJQUNiLElBQUksRUFBRSxRQUFRO0lBQ2QsS0FBSyxFQUFFLFNBQVM7SUFDaEIsU0FBUyxFQUFFLE1BQU07SUFDakIsZUFBZSxFQUFFLE9BQU87SUFDeEIsV0FBVyxJQU1WO0NBQ0YsQ0FBQztBQUtGLE1BQU0sT0FBTyxVQUFVOzs7O0lBUXJCLFlBQXdDLE1BQXdCOzs7OzBCQUxsQyxJQUFJLEdBQUcsRUFBeUI7UUFNNUQsSUFBSSxDQUFDLE1BQU0scUJBQU8sYUFBYSxFQUFLLE1BQU0sQ0FBQyxDQUFDO0tBQzdDOzs7Ozs7O0lBT0QsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLEVBQUUsTUFBeUI7UUFDeEMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTs7WUFFM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsV0FBVyxDQUFDLFNBQVMsbUJBQUssSUFBSSxDQUFDLE1BQU0sRUFBSyxNQUFNLEVBQUUsQ0FBQzthQUNwRDtZQUNELE9BQU8sV0FBVyxDQUFDO1NBQ3BCO2FBQU07O1lBRUwsTUFBTSxXQUFXLEdBQUcsSUFBSSxhQUFhLG1CQUFLLElBQUksQ0FBQyxNQUFNLEVBQUssTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1RixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckQ7S0FDRjs7Ozs7SUFLRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFrQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUNoRTs7Ozs7O0lBS08sY0FBYyxDQUFDLEVBQVU7UUFDL0IsT0FBTyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1QixDQUFDOzs7O1lBaERMLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs0Q0FTYyxRQUFRLFlBQUksTUFBTSxTQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICcuL25nLXByb2dyZXNzLXJlZic7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NDb25maWcsIENPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MuaW50ZXJmYWNlJztcclxuXHJcbmNvbnN0IGRlZmF1bHRDb25maWc6IE5nUHJvZ3Jlc3NDb25maWcgPSB7XHJcbiAgbWluOiA4LFxyXG4gIG1heDogMTAwLFxyXG4gIHNwZWVkOiAyMDAsXHJcbiAgZGVib3VuY2VUaW1lOiAwLFxyXG4gIHRyaWNrbGVTcGVlZDogMzAwLFxyXG4gIGZpeGVkOiB0cnVlLFxyXG4gIG1ldGVvcjogdHJ1ZSxcclxuICB0aGljazogZmFsc2UsXHJcbiAgc3Bpbm5lcjogdHJ1ZSxcclxuICBlYXNlOiAnbGluZWFyJyxcclxuICBjb2xvcjogJyMxQjk1RTAnLFxyXG4gIGRpcmVjdGlvbjogJ2x0cisnLFxyXG4gIHNwaW5uZXJQb3NpdGlvbjogJ3JpZ2h0JyxcclxuICB0cmlja2xlRnVuYzogKG46IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAobiA+PSAwICYmIG4gPCAyMCkgcmV0dXJuIDEwO1xyXG4gICAgaWYgKG4gPj0gMjAgJiYgbiA8IDUwKSByZXR1cm4gNDtcclxuICAgIGlmIChuID49IDUwICYmIG4gPCA4MCkgcmV0dXJuIDI7XHJcbiAgICBpZiAobiA+PSA4MCAmJiBuIDwgOTkpIHJldHVybiAwLjU7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzIHtcclxuXHJcbiAgLyoqIFN0b3JlIHByb2dyZXNzIGJhciBpbnN0YW5jZXMgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9pbnN0YW5jZXMgPSBuZXcgTWFwPHN0cmluZywgTmdQcm9ncmVzc1JlZj4oKTtcclxuXHJcbiAgLyoqIEdsb2JhbCBjb25maWcgKi9cclxuICBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQ09ORklHKSBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWcpIHtcclxuICAgIHRoaXMuY29uZmlnID0gey4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZ307XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgb3IgQ3JlYXRlIHByb2dyZXNzIGJhciBieSBJRFxyXG4gICAqIEBwYXJhbSBpZFxyXG4gICAqIEBwYXJhbSBjb25maWdcclxuICAgKi9cclxuICByZWYoaWQgPSAncm9vdCcsIGNvbmZpZz86IE5nUHJvZ3Jlc3NDb25maWcpIHtcclxuICAgIGlmICh0aGlzLl9pbnN0YW5jZXMuaGFzKGlkKSkge1xyXG4gICAgICAvLyBHZXQgUHJvZ3Jlc3NSZWYgaW5zdGFuY2VcclxuICAgICAgY29uc3QgcHJvZ3Jlc3NSZWYgPSB0aGlzLl9pbnN0YW5jZXMuZ2V0KGlkKTtcclxuICAgICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgIHByb2dyZXNzUmVmLnNldENvbmZpZyh7Li4udGhpcy5jb25maWcsIC4uLmNvbmZpZ30pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcm9ncmVzc1JlZjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENyZWF0ZSBuZXcgUHJvZ3Jlc3NSZWYgaW5zdGFuY2VcclxuICAgICAgY29uc3QgcHJvZ3Jlc3NSZWYgPSBuZXcgTmdQcm9ncmVzc1JlZih7Li4udGhpcy5jb25maWcsIC4uLmNvbmZpZ30sIHRoaXMuZGVsZXRlSW5zdGFuY2UoaWQpKTtcclxuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlcy5zZXQoaWQsIHByb2dyZXNzUmVmKS5nZXQoaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVzdHJveSBhbGwgcHJvZ3Jlc3MgYmFyIGluc3RhbmNlc1xyXG4gICAqL1xyXG4gIGRlc3Ryb3lBbGwoKSB7XHJcbiAgICB0aGlzLl9pbnN0YW5jZXMuZm9yRWFjaCgocmVmOiBOZ1Byb2dyZXNzUmVmKSA9PiByZWYuZGVzdHJveSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgZGVzdHJveWVyIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhciBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZGVsZXRlSW5zdGFuY2UoaWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgdGhpcy5faW5zdGFuY2VzLmRlbGV0ZShpZCk7XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=