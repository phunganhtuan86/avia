/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { CONFIG } from './ng-progress-http.interface';
var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = tslib_1.__assign({}, this._config, config);
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    NgProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._progressRef.complete();
            }
        }));
    };
    /**
     * Check if request is silent.
     * @param {?} req request
     * @return {?}
     */
    NgProgressInterceptor.prototype.checkUrl = /**
     * Check if request is silent.
     * @param {?} req request
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var url = req.url.toLowerCase();
        /** @type {?} */
        var found = this._config.silentApis.find(function (u) { return url.startsWith(u); });
        return !!found;
    };
    NgProgressInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG,] }] }
    ]; };
    return NgProgressInterceptor;
}());
export { NgProgressInterceptor };
if (false) {
    /** @type {?} */
    NgProgressInterceptor.prototype._inProgressCount;
    /** @type {?} */
    NgProgressInterceptor.prototype._progressRef;
    /** @type {?} */
    NgProgressInterceptor.prototype._config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXByb2dyZXNzYmFyL2h0dHAvIiwic291cmNlcyI6WyJsaWIvbmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQWlCLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUF3QixNQUFNLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7SUFZMUUsK0JBQVksVUFBc0IsRUFBOEIsTUFBNkI7Z0NBUGxFLENBQUM7dUJBRVk7WUFDdEMsRUFBRSxFQUFFLE1BQU07WUFDVixVQUFVLEVBQUUsRUFBRTtTQUNmO1FBR0MsSUFBSSxDQUFDLE9BQU8sd0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBSyxNQUFNLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNyRDs7Ozs7O0lBRUQseUNBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCO1FBQWxELGlCQW9CQzs7UUFsQkMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzNCO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsUUFBUSxDQUFDO1lBQ1AsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxLQUFJLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO2dCQUMvQixLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQzlCO1NBQ0YsQ0FBQyxDQUNILENBQUM7S0FDSDs7Ozs7O0lBTU8sd0NBQVE7Ozs7O2NBQUMsR0FBcUI7O1FBQ3BDLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7O1FBQ2xDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQWpCLENBQWlCLENBQUMsQ0FBQztRQUNyRSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7OztnQkE1Q2xCLFVBQVU7Ozs7Z0JBSEYsVUFBVTtnREFhb0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxNQUFNOztnQ0FqQmhFOztTQVFhLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzcywgTmdQcm9ncmVzc1JlZiB9IGZyb20gJ0BuZ3gtcHJvZ3Jlc3NiYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnLCBDT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLWh0dHAuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcblxyXG4gIHByaXZhdGUgX2luUHJvZ3Jlc3NDb3VudCA9IDA7XHJcbiAgcHJpdmF0ZSBfcHJvZ3Jlc3NSZWY6IE5nUHJvZ3Jlc3NSZWY7XHJcbiAgcHJpdmF0ZSBfY29uZmlnOiBOZ1Byb2dyZXNzSHR0cENvbmZpZyA9IHtcclxuICAgIGlkOiAncm9vdCcsXHJcbiAgICBzaWxlbnRBcGlzOiBbXVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKG5nUHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MsIEBPcHRpb25hbCgpIEBJbmplY3QoQ09ORklHKSBjb25maWc/OiBOZ1Byb2dyZXNzSHR0cENvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gey4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfTtcclxuICAgIHRoaXMuX3Byb2dyZXNzUmVmID0gbmdQcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgLy8gSWdub3JlIHNpbGVudCBhcGkgcmVxdWVzdHNcclxuICAgIGlmICh0aGlzLmNoZWNrVXJsKHJlcSkpIHtcclxuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50Kys7XHJcblxyXG4gICAgaWYgKCF0aGlzLl9wcm9ncmVzc1JlZi5pc1N0YXJ0ZWQpIHtcclxuICAgICAgdGhpcy5fcHJvZ3Jlc3NSZWYuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxyXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50LS07XHJcbiAgICAgICAgaWYgKHRoaXMuX2luUHJvZ3Jlc3NDb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NSZWYuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgcmVxdWVzdCBpcyBzaWxlbnQuXHJcbiAgICogQHBhcmFtIHJlcSByZXF1ZXN0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjaGVja1VybChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pIHtcclxuICAgIGNvbnN0IHVybCA9IHJlcS51cmwudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGZvdW5kID0gdGhpcy5fY29uZmlnLnNpbGVudEFwaXMuZmluZCgodSkgPT4gdXJsLnN0YXJ0c1dpdGgodSkpO1xyXG4gICAgcmV0dXJuICEhZm91bmQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==