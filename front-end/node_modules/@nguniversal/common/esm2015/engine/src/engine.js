/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ResourceLoader } from '@angular/compiler';
import { NgModuleFactory, CompilerFactory } from '@angular/core';
import { INITIAL_CONFIG, renderModuleFactory, platformDynamicServer } from '@angular/platform-server';
import * as fs from 'fs';
import { FileLoader } from './file-loader';
/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export class CommonEngine {
    /**
     * @param {?} moduleOrFactory
     * @param {?=} providers
     */
    constructor(moduleOrFactory, providers = []) {
        this.moduleOrFactory = moduleOrFactory;
        this.providers = providers;
        this.factoryCacheMap = new Map();
        this.templateCache = {};
    }
    /**
     * Return an instance of the platformServer compiler
     * @return {?}
     */
    getCompiler() {
        /** @type {?} */
        const compilerFactory = platformDynamicServer().injector.get(CompilerFactory);
        return compilerFactory.createCompiler([
            { providers: [{ provide: ResourceLoader, useClass: FileLoader, deps: [] }] }
        ]);
    }
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     * @param {?} opts
     * @return {?}
     */
    render(opts) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // if opts.document dosen't exist then opts.documentFilePath must
            /** @type {?} */
            const doc = opts.document || (yield this.getDocument((/** @type {?} */ ((/** @type {?} */ (opts)).documentFilePath))));
            /** @type {?} */
            const extraProviders = [
                ...(opts.providers || []),
                ...(this.providers || []),
                {
                    provide: INITIAL_CONFIG,
                    useValue: {
                        document: doc,
                        url: opts.url
                    }
                }
            ];
            /** @type {?} */
            const factory = yield this.getFactory();
            return renderModuleFactory(factory, { extraProviders });
        });
    }
    /**
     * Return the factory for a given engine instance
     * @return {?}
     */
    getFactory() {
        // If module has been compiled AoT
        /** @type {?} */
        const moduleOrFactory = this.moduleOrFactory;
        if (moduleOrFactory instanceof NgModuleFactory) {
            return Promise.resolve(moduleOrFactory);
        }
        else {
            // we're in JIT mode
            /** @type {?} */
            let moduleFactory = this.factoryCacheMap.get(moduleOrFactory);
            // If module factory is cached
            if (moduleFactory) {
                return Promise.resolve(moduleFactory);
            }
            // Compile the module and cache it
            return this.getCompiler().compileModuleAsync(moduleOrFactory)
                .then((/**
             * @param {?} factory
             * @return {?}
             */
            (factory) => {
                this.factoryCacheMap.set(moduleOrFactory, factory);
                return factory;
            }));
        }
    }
    /**
     * Retrieve the document from the cache or the filesystem
     * @private
     * @param {?} filePath
     * @return {?}
     */
    getDocument(filePath) {
        /** @type {?} */
        const doc = this.templateCache[filePath] = this.templateCache[filePath] ||
            fs.readFileSync(filePath).toString();
        // As  promise so we can change the API later without breaking
        return Promise.resolve(doc);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.factoryCacheMap;
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.templateCache;
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.moduleOrFactory;
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vZW5naW5lL3NyYy9lbmdpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBaUIsZUFBZSxFQUFFLGVBQWUsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFDLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3BHLE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXpCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7OztBQVF6QyxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFhdkIsWUFBb0IsZUFBK0MsRUFDL0MsWUFBOEIsRUFBRTtRQURoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBZ0M7UUFDL0MsY0FBUyxHQUFULFNBQVMsQ0FBdUI7UUFKNUMsb0JBQWUsR0FBRyxJQUFJLEdBQUcsRUFBaUMsQ0FBQztRQUMzRCxrQkFBYSxHQUE0QixFQUFFLENBQUM7SUFHRyxDQUFDOzs7OztJQVh4RCxXQUFXOztjQUNILGVBQWUsR0FBb0IscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztRQUM5RixPQUFPLGVBQWUsQ0FBQyxjQUFjLENBQUM7WUFDcEMsRUFBQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDLENBQUMsRUFBQztTQUN6RSxDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7O0lBWUssTUFBTSxDQUFDLElBQW1COzs7O2tCQUV4QixHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSSxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQUEsbUJBQUEsSUFBSSxFQUFDLENBQUMsZ0JBQWdCLEVBQVUsQ0FBQyxDQUFBOztrQkFDL0UsY0FBYyxHQUFHO2dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztnQkFDekI7b0JBQ0UsT0FBTyxFQUFFLGNBQWM7b0JBQ3ZCLFFBQVEsRUFBRTt3QkFDUixRQUFRLEVBQUUsR0FBRzt3QkFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7cUJBQ2Q7aUJBQ0Y7YUFDRjs7a0JBRUssT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN2QyxPQUFPLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxFQUFDLGNBQWMsRUFBQyxDQUFDLENBQUM7UUFDeEQsQ0FBQztLQUFBOzs7OztJQUdELFVBQVU7OztjQUVGLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZTtRQUM1QyxJQUFJLGVBQWUsWUFBWSxlQUFlLEVBQUU7WUFDOUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3pDO2FBQU07OztnQkFFRCxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO1lBRTdELDhCQUE4QjtZQUM5QixJQUFJLGFBQWEsRUFBRTtnQkFDakIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3ZDO1lBRUQsa0NBQWtDO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQztpQkFDMUQsSUFBSTs7OztZQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxPQUFPLENBQUM7WUFDakIsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNILENBQUM7Ozs7Ozs7SUFHTyxXQUFXLENBQUMsUUFBZ0I7O2NBQzVCLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQ3ZFLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFO1FBRXBDLDhEQUE4RDtRQUM5RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGOzs7Ozs7SUE3REMsdUNBQW1FOzs7OztJQUNuRSxxQ0FBb0Q7Ozs7O0lBRXhDLHVDQUF1RDs7Ozs7SUFDdkQsaUNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge1Jlc291cmNlTG9hZGVyfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5pbXBvcnQge0NvbXBpbGVyLCBUeXBlLCBOZ01vZHVsZUZhY3RvcnksIENvbXBpbGVyRmFjdG9yeSwgU3RhdGljUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtJTklUSUFMX0NPTkZJRywgcmVuZGVyTW9kdWxlRmFjdG9yeSwgcGxhdGZvcm1EeW5hbWljU2VydmVyfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1zZXJ2ZXInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQge0ZpbGVMb2FkZXJ9IGZyb20gJy4vZmlsZS1sb2FkZXInO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG4vKipcbiAqIEEgY29tbW9uIHJlbmRlcmluZyBlbmdpbmUgdXRpbGl0eS4gVGhpcyBhYnN0cmFjdHMgdGhlIGxvZ2ljXG4gKiBmb3IgaGFuZGxpbmcgdGhlIHBsYXRmb3JtU2VydmVyIGNvbXBpbGVyLCB0aGUgbW9kdWxlIGNhY2hlLCBhbmRcbiAqIHRoZSBkb2N1bWVudCBsb2FkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1vbkVuZ2luZSB7XG5cbiAgLyoqIFJldHVybiBhbiBpbnN0YW5jZSBvZiB0aGUgcGxhdGZvcm1TZXJ2ZXIgY29tcGlsZXIgKi9cbiAgZ2V0Q29tcGlsZXIoKTogQ29tcGlsZXIge1xuICAgIGNvbnN0IGNvbXBpbGVyRmFjdG9yeTogQ29tcGlsZXJGYWN0b3J5ID0gcGxhdGZvcm1EeW5hbWljU2VydmVyKCkuaW5qZWN0b3IuZ2V0KENvbXBpbGVyRmFjdG9yeSk7XG4gICAgcmV0dXJuIGNvbXBpbGVyRmFjdG9yeS5jcmVhdGVDb21waWxlcihbXG4gICAgICB7cHJvdmlkZXJzOiBbe3Byb3ZpZGU6IFJlc291cmNlTG9hZGVyLCB1c2VDbGFzczogRmlsZUxvYWRlciwgZGVwczogW119XX1cbiAgICBdKTtcbiAgfVxuXG4gIHByaXZhdGUgZmFjdG9yeUNhY2hlTWFwID0gbmV3IE1hcDxUeXBlPHt9PiwgTmdNb2R1bGVGYWN0b3J5PHt9Pj4oKTtcbiAgcHJpdmF0ZSB0ZW1wbGF0ZUNhY2hlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kdWxlT3JGYWN0b3J5OiBUeXBlPHt9PiB8IE5nTW9kdWxlRmFjdG9yeTx7fT4sXG4gICAgICAgICAgICAgIHByaXZhdGUgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW10pIHt9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhbiBIVE1MIGRvY3VtZW50IGZvciBhIHNwZWNpZmljIFVSTCB3aXRoIHNwZWNpZmllZFxuICAgKiByZW5kZXIgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgcmVuZGVyKG9wdHM6IFJlbmRlck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIC8vIGlmIG9wdHMuZG9jdW1lbnQgZG9zZW4ndCBleGlzdCB0aGVuIG9wdHMuZG9jdW1lbnRGaWxlUGF0aCBtdXN0XG4gICAgY29uc3QgZG9jID0gb3B0cy5kb2N1bWVudCB8fCBhd2FpdCB0aGlzLmdldERvY3VtZW50KG9wdHMhLmRvY3VtZW50RmlsZVBhdGggYXMgc3RyaW5nKTtcbiAgICBjb25zdCBleHRyYVByb3ZpZGVycyA9IFtcbiAgICAgIC4uLihvcHRzLnByb3ZpZGVycyB8fCBbXSksXG4gICAgICAuLi4odGhpcy5wcm92aWRlcnMgfHwgW10pLFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBJTklUSUFMX0NPTkZJRyxcbiAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICBkb2N1bWVudDogZG9jLFxuICAgICAgICAgIHVybDogb3B0cy51cmxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG5cbiAgICBjb25zdCBmYWN0b3J5ID0gYXdhaXQgdGhpcy5nZXRGYWN0b3J5KCk7XG4gICAgcmV0dXJuIHJlbmRlck1vZHVsZUZhY3RvcnkoZmFjdG9yeSwge2V4dHJhUHJvdmlkZXJzfSk7XG4gIH1cblxuICAvKiogUmV0dXJuIHRoZSBmYWN0b3J5IGZvciBhIGdpdmVuIGVuZ2luZSBpbnN0YW5jZSAqL1xuICBnZXRGYWN0b3J5KCk6IFByb21pc2U8TmdNb2R1bGVGYWN0b3J5PHt9Pj4ge1xuICAgIC8vIElmIG1vZHVsZSBoYXMgYmVlbiBjb21waWxlZCBBb1RcbiAgICBjb25zdCBtb2R1bGVPckZhY3RvcnkgPSB0aGlzLm1vZHVsZU9yRmFjdG9yeTtcbiAgICBpZiAobW9kdWxlT3JGYWN0b3J5IGluc3RhbmNlb2YgTmdNb2R1bGVGYWN0b3J5KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZU9yRmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlJ3JlIGluIEpJVCBtb2RlXG4gICAgICBsZXQgbW9kdWxlRmFjdG9yeSA9IHRoaXMuZmFjdG9yeUNhY2hlTWFwLmdldChtb2R1bGVPckZhY3RvcnkpO1xuXG4gICAgICAvLyBJZiBtb2R1bGUgZmFjdG9yeSBpcyBjYWNoZWRcbiAgICAgIGlmIChtb2R1bGVGYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9kdWxlRmFjdG9yeSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIG1vZHVsZSBhbmQgY2FjaGUgaXRcbiAgICAgIHJldHVybiB0aGlzLmdldENvbXBpbGVyKCkuY29tcGlsZU1vZHVsZUFzeW5jKG1vZHVsZU9yRmFjdG9yeSlcbiAgICAgICAgLnRoZW4oKGZhY3RvcnkpID0+IHtcbiAgICAgICAgICB0aGlzLmZhY3RvcnlDYWNoZU1hcC5zZXQobW9kdWxlT3JGYWN0b3J5LCBmYWN0b3J5KTtcbiAgICAgICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIFJldHJpZXZlIHRoZSBkb2N1bWVudCBmcm9tIHRoZSBjYWNoZSBvciB0aGUgZmlsZXN5c3RlbSAqL1xuICBwcml2YXRlIGdldERvY3VtZW50KGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGRvYyA9IHRoaXMudGVtcGxhdGVDYWNoZVtmaWxlUGF0aF0gPSB0aGlzLnRlbXBsYXRlQ2FjaGVbZmlsZVBhdGhdIHx8XG4gICAgZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoKS50b1N0cmluZygpO1xuXG4gICAgLy8gQXMgIHByb21pc2Ugc28gd2UgY2FuIGNoYW5nZSB0aGUgQVBJIGxhdGVyIHdpdGhvdXQgYnJlYWtpbmdcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRvYyk7XG4gIH1cbn1cbiJdfQ==