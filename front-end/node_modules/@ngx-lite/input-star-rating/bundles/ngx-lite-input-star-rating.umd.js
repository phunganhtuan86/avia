(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/input-star-rating', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite']['input-star-rating'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,core,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var starIcons = {
        outline: 'outline',
        full: 'full',
        half: 'half'
    };
    var NgxInputStarRatingComponent = /** @class */ (function () {
        function NgxInputStarRatingComponent() {
            this._value = 0;
            this.count = 5;
            this.disabled = false;
            this.starIcons = starIcons;
            this.buttons = [];
            // tslint:disable-next-line:no-empty
            this.onChange = function (_value) { };
            // tslint:disable-next-line:no-empty
            this.onTouched = function () { };
        }
        Object.defineProperty(NgxInputStarRatingComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._value = val;
                this.onChange(val);
                this.valueUpdate(this._value);
                this.onTouched();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    this.value = value;
                }
            };
        /**
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                for (var i = 0; i < this.count; i++) {
                    this.buttons.push({ active: false, icon: starIcons.outline });
                }
                this.valueUpdate(this.value);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["value"] && changes["value"].currentValue) {
                    this.valueUpdate(changes["value"].currentValue);
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.rate = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.buttons.forEach(function (btn, i) {
                    if (i <= index) {
                        btn.icon = starIcons.full;
                    }
                    else {
                        btn.icon = starIcons.outline;
                    }
                });
                /** @type {?} */
                var total = this.buttons.reduce(function (prev, next) {
                    if (next.icon === starIcons.full) {
                        return prev + 1;
                    }
                    else {
                        return prev;
                    }
                }, 0);
                this.value = total;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.mouseEnter = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.buttons.forEach(function (btn, i) {
                    if (i <= index) {
                        btn.active = true;
                    }
                    else {
                        btn.active = false;
                    }
                });
            };
        /**
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.mouseLeave = /**
         * @return {?}
         */
            function () {
                this.buttons.forEach(function (i) { return (i.active = false); });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxInputStarRatingComponent.prototype.valueUpdate = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.buttons.forEach(function (btn, i) {
                    /** @type {?} */
                    var starValue = i + 1;
                    if (value >= starValue) {
                        btn.icon = starIcons.full;
                    }
                    if (value >= starValue - 0.5 && value < starValue) {
                        btn.icon = starIcons.half;
                    }
                });
            };
        NgxInputStarRatingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-input-star-rating',
                        template: "<div class=\"ngx-input-rating\" (mouseleave)=\"mouseLeave()\">\n  <button type=\"button\" [disabled]=\"disabled\" *ngFor=\"let btn of buttons; let i = index\" class=\"ngx-input-rating__btn\" (click)=\"rate(i)\" [attr.aria-label]=\"'rate ' + (i + 1) + ' of ' + buttons.length\"\n    (mouseenter)=\"mouseEnter(i)\" class=\"ngx-input-star-rating__btn\">\n    <span *ngIf=\"btn.active || btn.icon === starIcons.full\" class=\"ngx-input-star-rating__full\">\n      <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n    </span>\n    <ng-container *ngIf=\"!btn.active\">\n      <span *ngIf=\"btn.icon === starIcons.half\" class=\"ngx-input-star-rating__half\">\n        <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n        <svg height=\"25\" width=\"10\" class=\"ngx-input-star-rating__star-half\">\n          <polygon points=\"9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78\" style=\"fill-rule:nonzero;\"/>\n        </svg>\n      </span>\n      <span *ngIf=\"btn.icon !== starIcons.full && btn.icon !== starIcons.half\" class=\"empty\">\n        <ng-container *ngTemplateOutlet=\"star\"></ng-container>\n      </span>\n    </ng-container>\n  </button>\n</div>\n\n<ng-template #star>\n  <svg height=\"25\" width=\"23\" class=\"ngx-input-star-rating__star\">\n    <polygon points=\"9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78\" style=\"fill-rule:nonzero;\"/>\n  </svg>\n</ng-template>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return NgxInputStarRatingComponent; }),
                                multi: true
                            }
                        ],
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["*,::after,::before{box-sizing:border-box}ngx-input-star-rating{display:inline-block;--color-star-default:#ccc;--color-star-highlight:#3d3d3d}.ngx-input-star-rating__star{fill:#ccc;fill:var(--color-star-default)}.ngx-input-star-rating__btn{background-color:transparent;border:0;cursor:pointer;position:relative;width:30px;height:25px}.ngx-input-star-rating__btn svg{position:absolute;top:0;left:5px}.ngx-input-star-rating__full .ngx-input-star-rating__star,.ngx-input-star-rating__half .ngx-input-star-rating__star-half{fill:#3d3d3d;fill:var(--color-star-highlight)}"]
                    }] }
        ];
        NgxInputStarRatingComponent.propDecorators = {
            _value: [{ type: core.Input, args: ['value',] }],
            count: [{ type: core.Input }],
            disabled: [{ type: core.Input }]
        };
        return NgxInputStarRatingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxInputStarRatingModule = /** @class */ (function () {
        function NgxInputStarRatingModule() {
        }
        NgxInputStarRatingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [NgxInputStarRatingComponent],
                        exports: [NgxInputStarRatingComponent]
                    },] }
        ];
        return NgxInputStarRatingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxInputStarRatingComponent = NgxInputStarRatingComponent;
    exports.NgxInputStarRatingModule = NgxInputStarRatingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,