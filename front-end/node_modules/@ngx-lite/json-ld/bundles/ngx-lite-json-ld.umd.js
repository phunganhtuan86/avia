(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/json-ld', ['exports', '@angular/core', '@angular/platform-browser', '@angular/common'], factory) :
    (factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite']['json-ld'] = {}),global.ng.core,global.ng.platformBrowser,global.ng.common));
}(this, (function (exports,core,platformBrowser,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxJsonLdComponent = /** @class */ (function () {
        function NgxJsonLdComponent(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxJsonLdComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.jsonLD = this.getSafeHTML(changes["json"].currentValue);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxJsonLdComponent.prototype.getSafeHTML = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var json = value
                    ? JSON.stringify(value, null, 2).replace(/<\/script>/g, '<\\/script>')
                    : '';
                /** @type {?} */
                var html = "<script type=\"application/ld+json\">" + json + "</script>";
                return this.sanitizer.bypassSecurityTrustHtml(html);
            };
        NgxJsonLdComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-json-ld',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NgxJsonLdComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        NgxJsonLdComponent.propDecorators = {
            json: [{ type: core.Input }],
            jsonLD: [{ type: core.HostBinding, args: ['innerHTML',] }]
        };
        return NgxJsonLdComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxJsonLdModule = /** @class */ (function () {
        function NgxJsonLdModule() {
        }
        NgxJsonLdModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [NgxJsonLdComponent],
                        exports: [NgxJsonLdComponent]
                    },] }
        ];
        return NgxJsonLdModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxJsonLdComponent = NgxJsonLdComponent;
    exports.NgxJsonLdModule = NgxJsonLdModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxpdGUtanNvbi1sZC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtbGl0ZS9qc29uLWxkL25neC1qc29uLWxkLmNvbXBvbmVudC50cyIsIm5nOi8vQG5neC1saXRlL2pzb24tbGQvbmd4LWpzb24tbGQubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtanNvbi1sZCcsXG4gIHRlbXBsYXRlOiAnJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTmd4SnNvbkxkQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkganNvbjtcbiAgQEhvc3RCaW5kaW5nKCdpbm5lckhUTUwnKSBqc29uTEQ6IFNhZmVIdG1sO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLmpzb25MRCA9IHRoaXMuZ2V0U2FmZUhUTUwoY2hhbmdlcy5qc29uLmN1cnJlbnRWYWx1ZSk7XG4gIH1cblxuICBnZXRTYWZlSFRNTCh2YWx1ZToge30pIHtcbiAgICBjb25zdCBqc29uID0gdmFsdWVcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIDIpLnJlcGxhY2UoLzxcXC9zY3JpcHQ+L2csICc8XFxcXC9zY3JpcHQ+JylcbiAgICAgIDogJyc7XG4gICAgY29uc3QgaHRtbCA9IGA8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9sZCtqc29uXCI+JHtqc29ufTwvc2NyaXB0PmA7XG4gICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKGh0bWwpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5neEpzb25MZENvbXBvbmVudCB9IGZyb20gJy4vbmd4LWpzb24tbGQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW05neEpzb25MZENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtOZ3hKc29uTGRDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEpzb25MZE1vZHVsZSB7fVxuIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsIkNoYW5nZURldGVjdGlvblN0cmF0ZWd5IiwiRG9tU2FuaXRpemVyIiwiSW5wdXQiLCJIb3N0QmluZGluZyIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFrQkUsNEJBQW9CLFNBQXVCO1lBQXZCLGNBQVMsR0FBVCxTQUFTLENBQWM7U0FBSTs7Ozs7UUFFL0Msd0NBQVc7Ozs7WUFBWCxVQUFZLE9BQXNCO2dCQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxTQUFNLFlBQVksQ0FBQyxDQUFDO2FBQzNEOzs7OztRQUVELHdDQUFXOzs7O1lBQVgsVUFBWSxLQUFTOztnQkFDbkIsSUFBTSxJQUFJLEdBQUcsS0FBSztzQkFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUM7c0JBQ3BFLEVBQUUsQ0FBQzs7Z0JBQ1AsSUFBTSxJQUFJLEdBQUcsMENBQXNDLElBQUksY0FBVyxDQUFDO2dCQUNuRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDckQ7O29CQXBCRkEsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxhQUFhO3dCQUN2QixRQUFRLEVBQUUsRUFBRTt3QkFDWixlQUFlLEVBQUVDLDRCQUF1QixDQUFDLE1BQU07cUJBQ2hEOzs7Ozt3QkFOUUMsNEJBQVk7Ozs7MkJBUWxCQyxVQUFLOzZCQUNMQyxnQkFBVyxTQUFDLFdBQVc7O2lDQWpCMUI7Ozs7Ozs7QUNBQTs7OztvQkFJQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRSxDQUFDQyxtQkFBWSxDQUFDO3dCQUN2QixZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzt3QkFDbEMsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7cUJBQzlCOzs4QkFSRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9