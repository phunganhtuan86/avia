import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { cretateHooks } from './hooks-factory';
import { lazyLoadImage } from './lazyload-image';
import { isWindowDefined } from './util';
var LazyLoadImageDirective = (function () {
    function LazyLoadImageDirective(el, ngZone, options) {
        this.onLoad = new EventEmitter();
        this.elementRef = el;
        this.ngZone = ngZone;
        this.propertyChanges$ = new ReplaySubject();
        this.hooks = cretateHooks(options);
    }
    LazyLoadImageDirective.prototype.ngOnChanges = function () {
        this.propertyChanges$.next({
            element: this.elementRef.nativeElement,
            imagePath: this.lazyImage,
            defaultImagePath: this.defaultImage,
            errorImagePath: this.errorImage,
            useSrcset: this.useSrcset,
            offset: this.offset | 0,
            scrollContainer: this.scrollTarget,
            scrollObservable: this.scrollObservable
        });
    };
    LazyLoadImageDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!isWindowDefined()) {
            return null;
        }
        this.ngZone.runOutsideAngular(function () {
            _this.scrollSubscription = _this.propertyChanges$.pipe(tap(function (attributes) { return _this.hooks.setup(attributes); }), switchMap(function (attributes) { return _this.hooks.getObservable(attributes).pipe(lazyLoadImage(_this.hooks, attributes)); })).subscribe(function (success) { return _this.onLoad.emit(success); });
        });
    };
    LazyLoadImageDirective.prototype.ngOnDestroy = function () {
        [this.scrollSubscription]
            .filter(function (subscription) { return subscription && !subscription.isUnsubscribed; })
            .forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    LazyLoadImageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyLoad]'
                },] },
    ];
    LazyLoadImageDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['options',] },] },
    ]; };
    LazyLoadImageDirective.propDecorators = {
        "lazyImage": [{ type: Input, args: ['lazyLoad',] },],
        "defaultImage": [{ type: Input },],
        "errorImage": [{ type: Input },],
        "scrollTarget": [{ type: Input },],
        "scrollObservable": [{ type: Input },],
        "offset": [{ type: Input },],
        "useSrcset": [{ type: Input },],
        "onLoad": [{ type: Output },],
    };
    return LazyLoadImageDirective;
}());
export { LazyLoadImageDirective };
//# sourceMappingURL=lazyload-image.directive.js.map