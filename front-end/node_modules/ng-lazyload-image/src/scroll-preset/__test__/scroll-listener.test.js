import { is, isNot } from '@tjoskar/assert';
import { createRxTestScheduler } from 'marble-test';
import { spy } from 'simple-spy';
import { getScrollListener, sampleObservable } from '../scroll-listener';
describe('Scroll listener', function () {
    var consoleWarnOrg = console.warn;
    var noop = function () { return undefined; };
    before(function () {
        console.warn = noop;
    });
    after(function () {
        console.warn = consoleWarnOrg;
    });
    it('Should return an empty observable', function () {
        var scheduler = createRxTestScheduler();
        var element = {
            addEventListener: null
        };
        var expected = '|';
        var listener = getScrollListener(element);
        scheduler.expectObservable(listener).toBe(expected);
        scheduler.flush();
    });
    it('Should return the same observable for the same target', function () {
        var element = {
            addEventListener: noop
        };
        var listener1 = getScrollListener(element);
        var listener2 = getScrollListener(element);
        is(listener1, listener2);
    });
    it('Should return diffrent observables for diffrent target', function () {
        var element1 = {
            addEventListener: noop
        };
        var element2 = {
            addEventListener: noop
        };
        var listener1 = getScrollListener(element1);
        var listener2 = getScrollListener(element2);
        isNot(listener1, listener2);
    });
    it('Should pass eventname, handler and options as argument', function () {
        var argumants = {
            eventName: '',
            handler: null,
            options: null
        };
        var element = {
            addEventListener: function (eventName, handler, options) {
                argumants = { eventName: eventName, handler: handler, options: options };
            },
            removeEventListener: noop
        };
        var subscription = getScrollListener(element).subscribe();
        is(argumants.eventName, 'scroll');
        is(argumants.options.passive, true);
        is(argumants.options.capture, false);
        is(typeof argumants.handler, 'function');
        subscription.unsubscribe();
    });
    it('Should call removeEventListener on unsubscribe', function () {
        var argumants = {
            eventName: '',
            handler: null,
            options: null
        };
        var element = {
            addEventListener: function (eventName, handler, options) {
                argumants = { eventName: eventName, handler: handler, options: options };
            },
            removeEventListener: spy(function (eventName, handler, options) {
                is(argumants.eventName, eventName);
                is(argumants.options.passive, options.passive);
                is(argumants.options.capture, options.capture);
                is(argumants.handler, handler);
            })
        };
        var subscription = getScrollListener(element).subscribe();
        subscription.unsubscribe();
        is(element.removeEventListener.callCount, 1, 'Should call removeEventListener one time');
    });
    it("Should start stream with ''", function (done) {
        var element = {
            addEventListener: noop,
            removeEventListener: noop
        };
        var subscriber = getScrollListener(element).subscribe(function (d) {
            is(d, '');
            done();
        });
        subscriber.unsubscribe();
    });
    it("Should share observable", function () {
        var subscriptionCounter = 0;
        var element = {
            addEventListener: function () {
                subscriptionCounter = subscriptionCounter + 1;
            },
            removeEventListener: noop
        };
        var subscriber1 = getScrollListener(element).subscribe();
        var subscriber2 = getScrollListener(element).subscribe();
        is(subscriptionCounter, 1);
        subscriber1.unsubscribe();
        subscriber2.unsubscribe();
    });
    it("Should sample the observable", function () {
        var scheduler = createRxTestScheduler();
        var values = { a: '', b: 'b' };
        var e1 = scheduler.createHotObservable('----b-^----b----------------------|', values);
        var expected = 'a---------b-----------------|';
        var obs = sampleObservable(e1, scheduler);
        scheduler.expectObservable(obs).toBe(expected, values);
        scheduler.flush();
    });
    it("Should emit event through the handler", function (done) {
        var eventHandler = null;
        var events = [];
        var element = {
            addEventListener: function (eventName, handler, options) {
                eventHandler = handler;
            },
            removeEventListener: noop
        };
        var subscriber = getScrollListener(element).subscribe(function (d) {
            events.push(d);
            if (events.length === 2) {
                is(events[0], '');
                is(events[1], 'oskar');
                subscriber.unsubscribe();
                done();
            }
        });
        eventHandler('oskar');
    });
});
//# sourceMappingURL=scroll-listener.test.js.map