/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var NgxJsonLdComponent = /** @class */ (function () {
    function NgxJsonLdComponent(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxJsonLdComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.jsonLD = this.getSafeHTML(changes["json"].currentValue);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxJsonLdComponent.prototype.getSafeHTML = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var json = value
            ? JSON.stringify(value, null, 2).replace(/<\/script>/g, '<\\/script>')
            : '';
        /** @type {?} */
        var html = "<script type=\"application/ld+json\">" + json + "</script>";
        return this.sanitizer.bypassSecurityTrustHtml(html);
    };
    NgxJsonLdComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-json-ld',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxJsonLdComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    NgxJsonLdComponent.propDecorators = {
        json: [{ type: Input }],
        jsonLD: [{ type: HostBinding, args: ['innerHTML',] }]
    };
    return NgxJsonLdComponent;
}());
export { NgxJsonLdComponent };
if (false) {
    /** @type {?} */
    NgxJsonLdComponent.prototype.json;
    /** @type {?} */
    NgxJsonLdComponent.prototype.jsonLD;
    /** @type {?} */
    NgxJsonLdComponent.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWpzb24tbGQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1saXRlL2pzb24tbGQvIiwic291cmNlcyI6WyJuZ3gtanNvbi1sZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFHTCx1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDOztJQVVqRSw0QkFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztLQUFJOzs7OztJQUUvQyx3Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sU0FBTSxZQUFZLENBQUMsQ0FBQztLQUMzRDs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksS0FBUzs7UUFDbkIsSUFBTSxJQUFJLEdBQUcsS0FBSztZQUNoQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO1lBQ3RFLENBQUMsQ0FBQyxFQUFFLENBQUM7O1FBQ1AsSUFBTSxJQUFJLEdBQUcsMENBQXNDLElBQUksY0FBVyxDQUFDO1FBQ25FLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNyRDs7Z0JBcEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQU5RLFlBQVk7Ozt1QkFRbEIsS0FBSzt5QkFDTCxXQUFXLFNBQUMsV0FBVzs7NkJBakIxQjs7U0FlYSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWpzb24tbGQnLFxuICB0ZW1wbGF0ZTogJycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE5neEpzb25MZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGpzb247XG4gIEBIb3N0QmluZGluZygnaW5uZXJIVE1MJykganNvbkxEOiBTYWZlSHRtbDtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5qc29uTEQgPSB0aGlzLmdldFNhZmVIVE1MKGNoYW5nZXMuanNvbi5jdXJyZW50VmFsdWUpO1xuICB9XG5cbiAgZ2V0U2FmZUhUTUwodmFsdWU6IHt9KSB7XG4gICAgY29uc3QganNvbiA9IHZhbHVlXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCAyKS5yZXBsYWNlKC88XFwvc2NyaXB0Pi9nLCAnPFxcXFwvc2NyaXB0PicpXG4gICAgICA6ICcnO1xuICAgIGNvbnN0IGh0bWwgPSBgPHNjcmlwdCB0eXBlPVwiYXBwbGljYXRpb24vbGQranNvblwiPiR7anNvbn08L3NjcmlwdD5gO1xuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChodG1sKTtcbiAgfVxufVxuIl19